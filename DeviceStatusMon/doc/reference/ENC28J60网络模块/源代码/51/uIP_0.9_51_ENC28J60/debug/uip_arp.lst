C51 COMPILER V8.16   UIP_ARP                                                               01/02/2011 16:07:30 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE UIP_ARP
OBJECT MODULE PLACED IN .\debug\uip_arp.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE uip_arp.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\debug\uip_arp.lst) OBJECT
                    -(.\debug\uip_arp.obj)

line level    source

   1          /**
   2           * \addtogroup uip
   3           * @{
   4           */
   5          
   6          /**
   7           * \defgroup uiparp uIP Address Resolution Protocol
   8           * @{
   9           * 
  10           * The Address Resolution Protocol ARP is used for mapping between IP
  11           * addresses and link level addresses such as the Ethernet MAC
  12           * addresses. ARP uses broadcast queries to ask for the link level
  13           * address of a known IP address and the host which is configured with
  14           * the IP address for which the query was meant, will respond with its
  15           * link level address.
  16           *
  17           * \note This ARP implementation only supports Ethernet.
  18           */
  19           
  20          /**
  21           * \file
  22           * Implementation of the ARP Address Resolution Protocol.
  23           * \author Adam Dunkels <adam@dunkels.com>
  24           *
  25           */
  26          
  27          /*
  28           * Copyright (c) 2001-2003, Adam Dunkels.
  29           * All rights reserved. 
  30           *
  31           * Redistribution and use in source and binary forms, with or without 
  32           * modification, are permitted provided that the following conditions 
  33           * are met: 
  34           * 1. Redistributions of source code must retain the above copyright 
  35           *    notice, this list of conditions and the following disclaimer. 
  36           * 2. Redistributions in binary form must reproduce the above copyright 
  37           *    notice, this list of conditions and the following disclaimer in the 
  38           *    documentation and/or other materials provided with the distribution. 
  39           * 3. The name of the author may not be used to endorse or promote
  40           *    products derived from this software without specific prior
  41           *    written permission.  
  42           *
  43           * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
  44           * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  45           * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  46           * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
  47           * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  48           * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
  49           * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  50           * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  51           * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  52           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  53           * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  54           *
C51 COMPILER V8.16   UIP_ARP                                                               01/02/2011 16:07:30 PAGE 2   

  55           * This file is part of the uIP TCP/IP stack.
  56           *
  57           * $Id: uip_arp.c,v 1.7.2.3 2003/10/06 22:42:30 adam Exp $
  58           *
  59           */
  60          
  61          
  62          #include "uip_arp.h"
  63          
  64          #include <string.h>
  65          
  66          struct arp_hdr {
  67            struct uip_eth_hdr ethhdr;
  68            u16_t hwtype;
  69            u16_t protocol;
  70            u8_t hwlen;
  71            u8_t protolen;
  72            u16_t opcode;
  73            struct uip_eth_addr shwaddr;
  74            u16_t sipaddr[2];
  75            struct uip_eth_addr dhwaddr;
  76            u16_t dipaddr[2]; 
  77          };
  78          
  79          struct ethip_hdr {
  80            struct uip_eth_hdr ethhdr;
  81            /* IP header. */
  82            u8_t vhl,
  83              tos,          
  84              len[2],       
  85              ipid[2],        
  86              ipoffset[2],  
  87              ttl,          
  88              proto;     
  89            u16_t ipchksum;
  90            u16_t srcipaddr[2], 
  91              destipaddr[2];
  92          };
  93          
  94          #define ARP_REQUEST 1
  95          #define ARP_REPLY   2
  96          
  97          #define ARP_HWTYPE_ETH 1
  98          
  99          struct arp_entry {
 100            u16_t ipaddr[2];
 101            struct uip_eth_addr ethaddr;
 102            u8_t time;
 103          };
 104          
 105          struct uip_eth_addr uip_ethaddr = {{UIP_ETHADDR0,
 106                                              UIP_ETHADDR1,
 107                                              UIP_ETHADDR2,
 108                                              UIP_ETHADDR3,
 109                                              UIP_ETHADDR4,
 110                                              UIP_ETHADDR5}};
 111          
 112          static struct arp_entry arp_table[UIP_ARPTAB_SIZE];
 113          static u16_t ipaddr[2];
 114          static u8_t i, c;
 115          
 116          static u8_t arptime;
C51 COMPILER V8.16   UIP_ARP                                                               01/02/2011 16:07:30 PAGE 3   

 117          static u8_t tmpage;
 118          
 119          #define BUF   ((struct arp_hdr *)&uip_buf[0])
 120          #define IPBUF ((struct ethip_hdr *)&uip_buf[0])
 121          /*-----------------------------------------------------------------------------------*/
 122          /**
 123           * Initialize the ARP module.
 124           *
 125           */
 126          /*-----------------------------------------------------------------------------------*/
 127          void
 128          uip_arp_init(void)
 129          {
 130   1        for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 131   2          memset(arp_table[i].ipaddr, 0, 4);
 132   2        }
 133   1      }
 134          /*-----------------------------------------------------------------------------------*/
 135          /**
 136           * Periodic ARP processing function.
 137           *
 138           * This function performs periodic timer processing in the ARP module
 139           * and should be called at regular intervals. The recommended interval
 140           * is 10 seconds between the calls.
 141           *
 142           */
 143          /*-----------------------------------------------------------------------------------*/
 144          void
 145          uip_arp_timer(void)
 146          {
 147   1        struct arp_entry *tabptr;
 148   1        
 149   1        ++arptime;
 150   1        for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 151   2          tabptr = &arp_table[i];
 152   2          if((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
 153   2             arptime - tabptr->time >= UIP_ARP_MAXAGE) {
 154   3            memset(tabptr->ipaddr, 0, 4);
 155   3          }
 156   2        }
 157   1      
 158   1      }
 159          /*-----------------------------------------------------------------------------------*/
 160          static void
 161          uip_arp_update(u16_t *ipaddr, struct uip_eth_addr *ethaddr)
 162          {
 163   1        register struct arp_entry *tabptr;
 164   1        /* Walk through the ARP mapping table and try to find an entry to
 165   1           update. If none is found, the IP -> MAC address mapping is
 166   1           inserted in the ARP table. */
 167   1        for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 168   2      
 169   2          tabptr = &arp_table[i];
 170   2          /* Only check those entries that are actually in use. */
 171   2          if(tabptr->ipaddr[0] != 0 &&
 172   2             tabptr->ipaddr[1] != 0) {
 173   3      
 174   3            /* Check if the source IP address of the incoming packet matches
 175   3               the IP address in this ARP table entry. */
 176   3            if(ipaddr[0] == tabptr->ipaddr[0] &&
 177   3               ipaddr[1] == tabptr->ipaddr[1]) {
 178   4               
C51 COMPILER V8.16   UIP_ARP                                                               01/02/2011 16:07:30 PAGE 4   

 179   4              /* An old entry found, update this and return. */
 180   4              memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
 181   4              tabptr->time = arptime;
 182   4      
 183   4              return;
 184   4            }
 185   3          }
 186   2        }
 187   1      
 188   1        /* If we get here, no existing ARP table entry was found, so we
 189   1           create one. */
 190   1      
 191   1        /* First, we try to find an unused entry in the ARP table. */
 192   1        for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 193   2          tabptr = &arp_table[i];
 194   2          if(tabptr->ipaddr[0] == 0 &&
 195   2             tabptr->ipaddr[1] == 0) {
 196   3            break;
 197   3          }
 198   2        }
 199   1      
 200   1        /* If no unused entry is found, we try to find the oldest entry and
 201   1           throw it away. */
 202   1        if(i == UIP_ARPTAB_SIZE) {
 203   2          tmpage = 0;
 204   2          c = 0;
 205   2          for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 206   3            tabptr = &arp_table[i];
 207   3            if(arptime - tabptr->time > tmpage) {
 208   4              tmpage = arptime - tabptr->time;
 209   4              c = i;
 210   4            }
 211   3          }
 212   2          i = c;
 213   2        }
 214   1      
 215   1        /* Now, i is the ARP table entry which we will fill with the new
 216   1           information. */
 217   1        memcpy(tabptr->ipaddr, ipaddr, 4);
 218   1        memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
 219   1        tabptr->time = arptime;
 220   1      }
 221          /*-----------------------------------------------------------------------------------*/
 222          /**
 223           * ARP processing for incoming IP packets
 224           *
 225           * This function should be called by the device driver when an IP
 226           * packet has been received. The function will check if the address is
 227           * in the ARP cache, and if so the ARP cache entry will be
 228           * refreshed. If no ARP cache entry was found, a new one is created.
 229           *
 230           * This function expects an IP packet with a prepended Ethernet header
 231           * in the uip_buf[] buffer, and the length of the packet in the global
 232           * variable uip_len.
 233           */
 234          /*-----------------------------------------------------------------------------------*/
 235          void
 236          uip_arp_ipin(void)
 237          {
 238   1        uip_len -= sizeof(struct uip_eth_hdr);
 239   1              
 240   1        /* Only insert/update an entry if the source IP address of the
C51 COMPILER V8.16   UIP_ARP                                                               01/02/2011 16:07:30 PAGE 5   

 241   1           incoming IP packet comes from a host on the local network. */
 242   1        if((IPBUF->srcipaddr[0] & uip_arp_netmask[0]) !=
 243   1           (uip_hostaddr[0] & uip_arp_netmask[0])) {
 244   2          return;
 245   2        }
 246   1        if((IPBUF->srcipaddr[1] & uip_arp_netmask[1]) !=
 247   1           (uip_hostaddr[1] & uip_arp_netmask[1])) {
 248   2          return;
 249   2        }
 250   1        uip_arp_update(IPBUF->srcipaddr, &(IPBUF->ethhdr.src));
 251   1        
 252   1        return;
 253   1      }
 254          /*-----------------------------------------------------------------------------------*/
 255          /**
 256           * ARP processing for incoming ARP packets.
 257           *
 258           * This function should be called by the device driver when an ARP
 259           * packet has been received. The function will act differently
 260           * depending on the ARP packet type: if it is a reply for a request
 261           * that we previously sent out, the ARP cache will be filled in with
 262           * the values from the ARP reply. If the incoming ARP packet is an ARP
 263           * request for our IP address, an ARP reply packet is created and put
 264           * into the uip_buf[] buffer.
 265           *
 266           * When the function returns, the value of the global variable uip_len
 267           * indicates whether the device driver should send out a packet or
 268           * not. If uip_len is zero, no packet should be sent. If uip_len is
 269           * non-zero, it contains the length of the outbound packet that is
 270           * present in the uip_buf[] buffer.
 271           *
 272           * This function expects an ARP packet with a prepended Ethernet
 273           * header in the uip_buf[] buffer, and the length of the packet in the
 274           * global variable uip_len.
 275           */
 276          /*-----------------------------------------------------------------------------------*/
 277          void
 278          uip_arp_arpin(void)
 279          {
 280   1      
 281   1        if(uip_len < sizeof(struct arp_hdr)) {
 282   2          uip_len = 0;
 283   2          return;
 284   2        }
 285   1      
 286   1        uip_len = 0;
 287   1        
 288   1        switch(BUF->opcode) {
 289   2        case HTONS(ARP_REQUEST):
 290   2          /* ARP request. If it asked for our address, we send out a
 291   2             reply. */
 292   2          if(BUF->dipaddr[0] == uip_hostaddr[0] &&
 293   2             BUF->dipaddr[1] == uip_hostaddr[1]) {
 294   3            /* The reply opcode is 2. */
 295   3            BUF->opcode = HTONS(2);
 296   3      
 297   3            memcpy(BUF->dhwaddr.addr, BUF->shwaddr.addr, 6);
 298   3            memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
 299   3            memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 300   3            memcpy(BUF->ethhdr.dest.addr, BUF->dhwaddr.addr, 6);
 301   3            
 302   3            BUF->dipaddr[0] = BUF->sipaddr[0];
C51 COMPILER V8.16   UIP_ARP                                                               01/02/2011 16:07:30 PAGE 6   

 303   3            BUF->dipaddr[1] = BUF->sipaddr[1];
 304   3            BUF->sipaddr[0] = uip_hostaddr[0];
 305   3            BUF->sipaddr[1] = uip_hostaddr[1];
 306   3      
 307   3            BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);      
 308   3            uip_len = sizeof(struct arp_hdr);
 309   3          }      
 310   2          break;
 311   2        case HTONS(ARP_REPLY):
 312   2          /* ARP reply. We insert or update the ARP table if it was meant
 313   2             for us. */
 314   2          if(BUF->dipaddr[0] == uip_hostaddr[0] &&
 315   2             BUF->dipaddr[1] == uip_hostaddr[1]) {
 316   3      
 317   3            uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
 318   3          }
 319   2          break;
 320   2        }
 321   1      
 322   1        return;
 323   1      }
 324          /*-----------------------------------------------------------------------------------*/
 325          /**
 326           * Prepend Ethernet header to an outbound IP packet and see if we need
 327           * to send out an ARP request.
 328           *
 329           * This function should be called before sending out an IP packet. The
 330           * function checks the destination IP address of the IP packet to see
 331           * what Ethernet MAC address that should be used as a destination MAC
 332           * address on the Ethernet.
 333           *
 334           * If the destination IP address is in the local network (determined
 335           * by logical ANDing of netmask and our IP address), the function
 336           * checks the ARP cache to see if an entry for the destination IP
 337           * address is found. If so, an Ethernet header is prepended and the
 338           * function returns. If no ARP cache entry is found for the
 339           * destination IP address, the packet in the uip_buf[] is replaced by
 340           * an ARP request packet for the IP address. The IP packet is dropped
 341           * and it is assumed that they higher level protocols (e.g., TCP)
 342           * eventually will retransmit the dropped packet.
 343           *
 344           * If the destination IP address is not on the local network, the IP
 345           * address of the default router is used instead.
 346           *
 347           * When the function returns, a packet is present in the uip_buf[]
 348           * buffer, and the length of the packet is in the global variable
 349           * uip_len.
 350           */
 351          /*-----------------------------------------------------------------------------------*/
 352          void
 353          uip_arp_out(void)
 354          {
 355   1        struct arp_entry *tabptr;
 356   1        /* Find the destination IP address in the ARP table and construct
 357   1           the Ethernet header. If the destination IP addres isn't on the
 358   1           local network, we use the default router's IP address instead.
 359   1      
 360   1           If not ARP table entry is found, we overwrite the original IP
 361   1           packet with an ARP request for the IP address. */
 362   1      
 363   1        /* Check if the destination address is on the local network. */
 364   1        if((IPBUF->destipaddr[0] & uip_arp_netmask[0]) !=
C51 COMPILER V8.16   UIP_ARP                                                               01/02/2011 16:07:30 PAGE 7   

 365   1           (uip_hostaddr[0] & uip_arp_netmask[0]) ||
 366   1           (IPBUF->destipaddr[1] & uip_arp_netmask[1]) !=
 367   1           (uip_hostaddr[1] & uip_arp_netmask[1])) {
 368   2          /* Destination address was not on the local network, so we need to
 369   2             use the default router's IP address instead of the destination
 370   2             address when determining the MAC address. */
 371   2          ipaddr[0] = uip_arp_draddr[0];
 372   2          ipaddr[1] = uip_arp_draddr[1];
 373   2        } else {
 374   2          /* Else, we use the destination IP address. */
 375   2          ipaddr[0] = IPBUF->destipaddr[0];
 376   2          ipaddr[1] = IPBUF->destipaddr[1];
 377   2        }
 378   1            
 379   1        for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 380   2          tabptr = &arp_table[i];
 381   2          if(ipaddr[0] == tabptr->ipaddr[0] &&
 382   2             ipaddr[1] == tabptr->ipaddr[1])
 383   2            break;
 384   2        }
 385   1      
 386   1        if(i == UIP_ARPTAB_SIZE) {
 387   2          /* The destination address was not in our ARP table, so we
 388   2             overwrite the IP packet with an ARP request. */
 389   2      
 390   2          memset(BUF->ethhdr.dest.addr, 0xff, 6);
 391   2          memset(BUF->dhwaddr.addr, 0x00, 6);
 392   2          memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 393   2          memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
 394   2          
 395   2          BUF->dipaddr[0] = ipaddr[0];
 396   2          BUF->dipaddr[1] = ipaddr[1];
 397   2          BUF->sipaddr[0] = uip_hostaddr[0];
 398   2          BUF->sipaddr[1] = uip_hostaddr[1];
 399   2          BUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
 400   2          BUF->hwtype = HTONS(ARP_HWTYPE_ETH);
 401   2          BUF->protocol = HTONS(UIP_ETHTYPE_IP);
 402   2          BUF->hwlen = 6;
 403   2          BUF->protolen = 4;
 404   2          BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
 405   2      
 406   2          uip_appdata = &uip_buf[40 + UIP_LLH_LEN];
 407   2          
 408   2          uip_len = sizeof(struct arp_hdr);
 409   2          return;
 410   2        }
 411   1      
 412   1        /* Build an ethernet header. */
 413   1        memcpy(IPBUF->ethhdr.dest.addr, tabptr->ethaddr.addr, 6);
 414   1        memcpy(IPBUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 415   1        
 416   1        IPBUF->ethhdr.type = HTONS(UIP_ETHTYPE_IP);
 417   1      
 418   1        uip_len += sizeof(struct uip_eth_hdr);
 419   1      }
 420          /*-----------------------------------------------------------------------------------*/
 421          
 422          /** @} */
 423          /** @} */


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V8.16   UIP_ARP                                                               01/02/2011 16:07:30 PAGE 8   

   CODE SIZE        =   1554    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    102      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
