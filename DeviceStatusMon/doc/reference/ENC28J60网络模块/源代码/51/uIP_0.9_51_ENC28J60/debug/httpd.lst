C51 COMPILER V8.16   HTTPD                                                                 01/02/2011 16:07:21 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE HTTPD
OBJECT MODULE PLACED IN .\debug\httpd.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE httpd.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\debug\httpd.lst) OBJECT(.\d
                    -ebug\httpd.obj)

line level    source

   1          /**
   2           * \addtogroup exampleapps
   3           * @{
   4           */
   5          
   6          /**
   7           * \defgroup httpd Web server
   8           * @{
   9           *
  10           * The uIP web server is a very simplistic implementation of an HTTP
  11           * server. It can serve web pages and files from a read-only ROM
  12           * filesystem, and provides a very small scripting language.
  13           *
  14           * The script language is very simple and works as follows. Each
  15           * script line starts with a command character, either "i", "t", "c",
  16           * "#" or ".".  The "i" command tells the script interpreter to
  17           * "include" a file from the virtual file system and output it to the
  18           * web browser. The "t" command should be followed by a line of text
  19           * that is to be output to the browser. The "c" command is used to
  20           * call one of the C functions from the httpd-cgi.c file. A line that
  21           * starts with a "#" is ignored (i.e., the "#" denotes a comment), and
  22           * the "." denotes the last script line.
  23           *
  24           * The script that produces the file statistics page looks somewhat
  25           * like this:
  26           *
  27           \code
  28          i /header.html
  29          t <h1>File statistics</h1><br><table width="100%">
  30          t <tr><td><a href="/index.html">/index.html</a></td><td>
  31          c a /index.html
  32          t </td></tr> <tr><td><a href="/cgi/files">/cgi/files</a></td><td>
  33          c a /cgi/files
  34          t </td></tr> <tr><td><a href="/cgi/tcp">/cgi/tcp</a></td><td>
  35          c a /cgi/tcp
  36          t </td></tr> <tr><td><a href="/404.html">/404.html</a></td><td>
  37          c a /404.html
  38          t </td></tr></table>
  39          i /footer.plain
  40          .
  41           \endcode
  42           *
  43           */
  44          
  45          
  46          /**
  47           * \file
  48           * HTTP server.
  49           * \author Adam Dunkels <adam@dunkels.com>
  50           */
  51          
  52          /*
  53           * Copyright (c) 2001, Adam Dunkels.
  54           * All rights reserved. 
C51 COMPILER V8.16   HTTPD                                                                 01/02/2011 16:07:21 PAGE 2   

  55           *
  56           * Redistribution and use in source and binary forms, with or without 
  57           * modification, are permitted provided that the following conditions 
  58           * are met: 
  59           * 1. Redistributions of source code must retain the above copyright 
  60           *    notice, this list of conditions and the following disclaimer. 
  61           * 2. Redistributions in binary form must reproduce the above copyright 
  62           *    notice, this list of conditions and the following disclaimer in the 
  63           *    documentation and/or other materials provided with the distribution. 
  64           * 3. The name of the author may not be used to endorse or promote
  65           *    products derived from this software without specific prior
  66           *    written permission.  
  67           *
  68           * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
  69           * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  70           * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  71           * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
  72           * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  73           * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
  74           * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  75           * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  76           * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  77           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  78           * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  79           *
  80           * This file is part of the uIP TCP/IP stack.
  81           *
  82           * $Id: httpd.c,v 1.28.2.6 2003/10/07 13:22:27 adam Exp $
  83           *
  84           */
  85          
  86          
  87          #include "uip.h"
  88          #include "httpd.h"
  89          #include "fs.h"
  90          #include "fsdata.h"
  91          #include "cgi.h"
  92          
  93          #define NULL (void *)0
  94          
  95          /* The HTTP server states: */
  96          #define HTTP_NOGET        0
  97          #define HTTP_FILE         1
  98          #define HTTP_TEXT         2
  99          #define HTTP_FUNC         3
 100          #define HTTP_END          4
 101          
 102          #ifdef DEBUG
              #include <stdio.h>
              #define PRINT(x) printf("%s", x)
              #define PRINTLN(x) printf("%s\n", x)
              #else /* DEBUG */
 107          #define PRINT(x)
 108          #define PRINTLN(x)
 109          #endif /* DEBUG */
 110          
 111          struct httpd_state *hs;
 112          
 113          //extern const struct fsdata_file file_index_html;
 114          //extern const struct fsdata_file file_404_html;
 115          
 116          static void next_scriptline(void);
C51 COMPILER V8.16   HTTPD                                                                 01/02/2011 16:07:21 PAGE 3   

 117          static void next_scriptstate(void);
 118          
 119          #define ISO_G        0x47
 120          #define ISO_E        0x45
 121          #define ISO_T        0x54
 122          #define ISO_slash    0x2f    
 123          #define ISO_c        0x63
 124          #define ISO_g        0x67
 125          #define ISO_i        0x69
 126          #define ISO_space    0x20
 127          #define ISO_nl       0x0a
 128          #define ISO_cr       0x0d
 129          #define ISO_a        0x61
 130          #define ISO_t        0x74
 131          #define ISO_hash     0x23
 132          #define ISO_period   0x2e
 133          
 134          
 135          /*-----------------------------------------------------------------------------------*/
 136          /**
 137           * Initialize the web server.
 138           *
 139           * Starts to listen for incoming connection requests on TCP port 80.
 140           */
 141          /*-----------------------------------------------------------------------------------*/
 142          void
 143          httpd_init(void)
 144          {
 145   1        fs_init();
 146   1        
 147   1        /* Listen to port 80. */
 148   1        uip_listen(HTONS(80));
 149   1      }
 150          /*-----------------------------------------------------------------------------------*/
 151          void
 152          httpd_appcall(void)
 153          {
 154   1        struct fs_file fsfile;  
 155   1      
 156   1        u8_t i;
 157   1      
 158   1        switch(uip_conn->lport) {
 159   2          /* This is the web server: */
 160   2        case HTONS(80):
 161   2          /* Pick out the application state from the uip_conn structure. */
 162   2          hs = (struct httpd_state *)(uip_conn->appstate);
 163   2      
 164   2          /* We use the uip_ test functions to deduce why we were
 165   2             called. If uip_connected() is non-zero, we were called
 166   2             because a remote host has connected to us. If
 167   2             uip_newdata() is non-zero, we were called because the
 168   2             remote host has sent us new data, and if uip_acked() is
 169   2             non-zero, the remote host has acknowledged the data we
 170   2             previously sent to it. */
 171   2          if(uip_connected()) {
 172   3            /* Since we have just been connected with the remote host, we
 173   3               reset the state for this connection. The ->count variable
 174   3               contains the amount of data that is yet to be sent to the
 175   3               remote host, and the ->state is set to HTTP_NOGET to signal
 176   3               that we haven't received any HTTP GET request for this
 177   3               connection yet. */
 178   3            hs->state = HTTP_NOGET;
C51 COMPILER V8.16   HTTPD                                                                 01/02/2011 16:07:21 PAGE 4   

 179   3            hs->count = 0;
 180   3            return;
 181   3      
 182   3          } else if(uip_poll()) {
 183   3            /* If we are polled ten times, we abort the connection. This is
 184   3               because we don't want connections lingering indefinately in
 185   3               the system. */
 186   3            if(hs->count++ >= 10) {
 187   4              uip_abort();
 188   4            }
 189   3            return;
 190   3          } else if(uip_newdata() && hs->state == HTTP_NOGET) {
 191   3            /* This is the first data we receive, and it should contain a
 192   3               GET. */
 193   3            
 194   3            /* Check for GET. */
 195   3            if(uip_appdata[0] != ISO_G ||
 196   3               uip_appdata[1] != ISO_E ||
 197   3               uip_appdata[2] != ISO_T ||
 198   3               uip_appdata[3] != ISO_space) {
 199   4              /* If it isn't a GET, we abort the connection. */
 200   4              uip_abort();
 201   4              return;
 202   4            }
 203   3                     
 204   3            /* Find the file we are looking for. */
 205   3            for(i = 4; i < 40; ++i) {
 206   4              if(uip_appdata[i] == ISO_space ||
 207   4                 uip_appdata[i] == ISO_cr ||
 208   4                 uip_appdata[i] == ISO_nl) {
 209   5                uip_appdata[i] = 0;
 210   5                break;
 211   5              }
 212   4            }
 213   3      
 214   3            PRINT("request for file ");
 215   3            PRINTLN(&uip_appdata[4]);
 216   3            
 217   3            /* Check for a request for "/". */
 218   3            if(uip_appdata[4] == ISO_slash &&
 219   3               uip_appdata[5] == 0) {
 220   4              fs_open(file_index_html->name, &fsfile);    
 221   4            } else {
 222   4              if(!fs_open((const char *)&uip_appdata[4], &fsfile)) {
 223   5                PRINTLN("couldn't open file");
 224   5                fs_open(file_404_html->name, &fsfile);
 225   5              }
 226   4            } 
 227   3      
 228   3      
 229   3            if(uip_appdata[4] == ISO_slash &&
 230   3               uip_appdata[5] == ISO_c &&
 231   3               uip_appdata[6] == ISO_g &&
 232   3               uip_appdata[7] == ISO_i &&
 233   3               uip_appdata[8] == ISO_slash) {
 234   4              /* If the request is for a file that starts with "/cgi/", we
 235   4                 prepare for invoking a script. */    
 236   4              hs->script = fsfile.dat;
 237   4              next_scriptstate();
 238   4            } else {
 239   4              hs->script = NULL;
 240   4              /* The web server is now no longer in the HTTP_NOGET state, but
C51 COMPILER V8.16   HTTPD                                                                 01/02/2011 16:07:21 PAGE 5   

 241   4                 in the HTTP_FILE state since is has now got the GET from
 242   4                 the client and will start transmitting the file. */
 243   4              hs->state = HTTP_FILE;
 244   4      
 245   4              /* Point the file pointers in the connection state to point to
 246   4                 the first byte of the file. */
 247   4              hs->dataptr = fsfile.dat;
 248   4              hs->count = fsfile.len; 
 249   4            }     
 250   3          }
 251   2      
 252   2          
 253   2          if(hs->state != HTTP_FUNC) {
 254   3            /* Check if the client (remote end) has acknowledged any data that
 255   3               we've previously sent. If so, we move the file pointer further
 256   3               into the file and send back more data. If we are out of data to
 257   3               send, we close the connection. */
 258   3            if(uip_acked()) {
 259   4              if(hs->count >= uip_conn->len) {
 260   5                hs->count -= uip_conn->len;
 261   5                hs->dataptr += uip_conn->len;
 262   5              } else {
 263   5                hs->count = 0;
 264   5              }
 265   4              
 266   4              if(hs->count == 0) {
 267   5                if(hs->script != NULL) {
 268   6                  next_scriptline();
 269   6                  next_scriptstate();
 270   6                } else {
 271   6                  uip_close();
 272   6                }
 273   5              }
 274   4            }         
 275   3          } else {
 276   3            /* Call the CGI function. */
 277   3            if(cgitab[hs->script[2] - ISO_a](uip_acked())) {
 278   4              /* If the function returns non-zero, we jump to the next line
 279   4                 in the script. */
 280   4              next_scriptline();
 281   4              next_scriptstate();
 282   4            }
 283   3          }
 284   2      
 285   2          if(hs->state != HTTP_FUNC && !uip_poll()) {
 286   3            /* Send a piece of data, but not more than the MSS of the
 287   3               connection. */
 288   3            uip_send(hs->dataptr, hs->count);
 289   3          }
 290   2      
 291   2          /* Finally, return to uIP. Our outgoing packet will soon be on its
 292   2             way... */
 293   2          return;
 294   2      
 295   2        default:
 296   2          /* Should never happen. */
 297   2          uip_abort();
 298   2          break;
 299   2        }  
 300   1      }
 301          /*-----------------------------------------------------------------------------------*/
 302          /* next_scriptline():
C51 COMPILER V8.16   HTTPD                                                                 01/02/2011 16:07:21 PAGE 6   

 303           *
 304           * Reads the script until it finds a newline. */
 305          static void
 306          next_scriptline(void)
 307          {
 308   1        /* Loop until we find a newline character. */
 309   1        do {
 310   2          ++(hs->script);
 311   2        } while(hs->script[0] != ISO_nl);
 312   1      
 313   1        /* Eat up the newline as well. */
 314   1        ++(hs->script);
 315   1      }
 316          /*-----------------------------------------------------------------------------------*/
 317          /* next_sciptstate:
 318           *
 319           * Reads one line of script and decides what to do next.
 320           */
 321          static void
 322          next_scriptstate(void)
 323          {
 324   1        struct fs_file fsfile;
 325   1        u8_t i;
 326   1      
 327   1       again:
 328   1        switch(hs->script[0]) {
 329   2        case ISO_t:
 330   2          /* Send a text string. */
 331   2          hs->state = HTTP_TEXT;
 332   2          hs->dataptr = &hs->script[2];
 333   2      
 334   2          /* Calculate length of string. */
 335   2          for(i = 0; hs->dataptr[i] != ISO_nl; ++i);
 336   2          hs->count = i;    
 337   2          break;
 338   2        case ISO_c:
 339   2          /* Call a function. */
 340   2          hs->state = HTTP_FUNC;
 341   2          hs->dataptr = NULL;
 342   2          hs->count = 0;
 343   2          cgitab[hs->script[2] - ISO_a](0);
 344   2          break;
 345   2        case ISO_i:   
 346   2          /* Include a file. */
 347   2          hs->state = HTTP_FILE;
 348   2          if(!fs_open(&hs->script[2], &fsfile)) {
 349   3            uip_abort();
 350   3          }
 351   2          hs->dataptr = fsfile.dat;
 352   2          hs->count = fsfile.len;
 353   2          break;
 354   2        case ISO_hash:
 355   2          /* Comment line. */
 356   2          next_scriptline();
 357   2          goto again;
 358   2          break;
 359   2        case ISO_period:
 360   2          /* End of script. */
 361   2          hs->state = HTTP_END;
 362   2          uip_close();
 363   2          break;
 364   2        default:
C51 COMPILER V8.16   HTTPD                                                                 01/02/2011 16:07:21 PAGE 7   

 365   2          uip_abort();
 366   2          break;
 367   2        }
 368   1      }
 369          /*-----------------------------------------------------------------------------------*/
 370          /** @} */
 371          /** @} */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1523    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      3      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
