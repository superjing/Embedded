C51 COMPILER V8.16   UIP                                                                   01/02/2011 16:07:25 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE UIP
OBJECT MODULE PLACED IN .\debug\uip.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE uip.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\debug\uip.lst) OBJECT(.\debug
                    -\uip.obj)

line level    source

   1          /**
   2           * \addtogroup uip
   3           * @{
   4           */
   5          
   6          /**
   7           * \file
   8           * The uIP TCP/IP stack code.
   9           * \author Adam Dunkels <adam@dunkels.com>
  10           */
  11          
  12          /*
  13           * Copyright (c) 2001-2003, Adam Dunkels.
  14           * All rights reserved. 
  15           *
  16           * Redistribution and use in source and binary forms, with or without 
  17           * modification, are permitted provided that the following conditions 
  18           * are met: 
  19           * 1. Redistributions of source code must retain the above copyright 
  20           *    notice, this list of conditions and the following disclaimer. 
  21           * 2. Redistributions in binary form must reproduce the above copyright 
  22           *    notice, this list of conditions and the following disclaimer in the 
  23           *    documentation and/or other materials provided with the distribution. 
  24           * 3. The name of the author may not be used to endorse or promote
  25           *    products derived from this software without specific prior
  26           *    written permission.  
  27           *
  28           * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
  29           * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  30           * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  31           * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
  32           * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33           * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
  34           * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  35           * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  36           * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  37           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  38           * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  39           *
  40           * This file is part of the uIP TCP/IP stack.
  41           *
  42           * $Id: uip.c,v 1.62.2.10 2003/10/07 13:23:01 adam Exp $
  43           *
  44           */
  45          
  46          /*
  47          This is a small implementation of the IP and TCP protocols (as well as
  48          some basic ICMP stuff). The implementation couples the IP, TCP and the
  49          application layers very tightly. To keep the size of the compiled code
  50          down, this code also features heavy usage of the goto statement.
  51          
  52          The principle is that we have a small buffer, called the uip_buf, in
  53          which the device driver puts an incoming packet. The TCP/IP stack
  54          parses the headers in the packet, and calls upon the application. If
C51 COMPILER V8.16   UIP                                                                   01/02/2011 16:07:25 PAGE 2   

  55          the remote host has sent data to the application, this data is present
  56          in the uip_buf and the application read the data from there. It is up
  57          to the application to put this data into a byte stream if needed. The
  58          application will not be fed with data that is out of sequence.
  59          
  60          If the application whishes to send data to the peer, it should put its
  61          data into the uip_buf, 40 bytes from the start of the buffer. The
  62          TCP/IP stack will calculate the checksums, and fill in the necessary
  63          header fields and finally send the packet back to the peer.
  64          */
  65          
  66          #include "uip.h"
  67          #include "uipopt.h"
  68          #include "uip_arch.h"
  69          
  70          /*-----------------------------------------------------------------------------------*/
  71          /* Variable definitions. */
  72          
  73          
  74          /* The IP address of this host. If it is defined to be fixed (by setting UIP_FIXEDADDR to 1 in uipopt.h), 
             -the address is set here. Otherwise, the address */
  75          #if UIP_FIXEDADDR > 0
  76          const u16_t uip_hostaddr[2] =
  77            {HTONS((UIP_IPADDR0 << 8) | UIP_IPADDR1),
  78             HTONS((UIP_IPADDR2 << 8) | UIP_IPADDR3)};
  79          const u16_t uip_arp_draddr[2] =
  80            {HTONS((UIP_DRIPADDR0 << 8) | UIP_DRIPADDR1),
  81             HTONS((UIP_DRIPADDR2 << 8) | UIP_DRIPADDR3)};
  82          const u16_t uip_arp_netmask[2] =
  83            {HTONS((UIP_NETMASK0 << 8) | UIP_NETMASK1),
  84             HTONS((UIP_NETMASK2 << 8) | UIP_NETMASK3)};
  85          #else
              u16_t uip_hostaddr[2];       
              u16_t uip_arp_draddr[2], uip_arp_netmask[2];
              #endif /* UIP_FIXEDADDR */
  89          
  90          u8_t uip_buf[UIP_BUFSIZE+2];   /* The packet buffer that contains
  91                                          incoming packets. */
  92          volatile u8_t *uip_appdata;  /* The uip_appdata pointer points to
  93                                          application data. */
  94          volatile u8_t *uip_sappdata;  /* The uip_appdata pointer points to the
  95                                           application data which is to be sent. */
  96          #if UIP_URGDATA > 0
  97          volatile u8_t *uip_urgdata;  /* The uip_urgdata pointer points to
  98                                          urgent data (out-of-band data), if
  99                                          present. */
 100          volatile u8_t uip_urglen, uip_surglen;
 101          #endif /* UIP_URGDATA > 0 */
 102          
 103          volatile u16_t uip_len, uip_slen;
 104                                       /* The uip_len is either 8 or 16 bits,
 105                                          depending on the maximum packet
 106                                          size. */
 107          
 108          volatile u8_t uip_flags;     /* The uip_flags variable is used for
 109                                          communication between the TCP/IP stack
 110                                          and the application program. */
 111          struct uip_conn *uip_conn;   /* uip_conn always points to the current
 112                                          connection. */
 113          
 114          struct uip_conn uip_conns[UIP_CONNS];
 115                                       /* The uip_conns array holds all TCP
C51 COMPILER V8.16   UIP                                                                   01/02/2011 16:07:25 PAGE 3   

 116                                          connections. */
 117          u16_t uip_listenports[UIP_LISTENPORTS];
 118                                       /* The uip_listenports list all currently
 119                                          listning ports. */
 120          #if UIP_UDP
              struct uip_udp_conn *uip_udp_conn;
              struct uip_udp_conn uip_udp_conns[UIP_UDP_CONNS];
              #endif /* UIP_UDP */
 124          
 125          
 126          static u16_t ipid;           /* Ths ipid variable is an increasing
 127                                          number that is used for the IP ID
 128                                          field. */
 129          
 130          static u8_t iss[4];          /* The iss variable is used for the TCP
 131                                          initial sequence number. */
 132          
 133          #if UIP_ACTIVE_OPEN
              static u16_t lastport;       /* Keeps track of the last port used for
                                              a new connection. */
              #endif /* UIP_ACTIVE_OPEN */
 137          
 138          /* Temporary variables. */
 139          volatile u8_t uip_acc32[4];
 140          static u8_t c, opt;
 141          static u16_t tmp16;
 142          
 143          /* Structures and definitions. */
 144          #define TCP_FIN 0x01
 145          #define TCP_SYN 0x02
 146          #define TCP_RST 0x04
 147          #define TCP_PSH 0x08
 148          #define TCP_ACK 0x10
 149          #define TCP_URG 0x20
 150          #define TCP_CTL 0x3f
 151          
 152          #define ICMP_ECHO_REPLY 0
 153          #define ICMP_ECHO       8     
 154          
 155          /* Macros. */
 156          #define BUF ((uip_tcpip_hdr *)&uip_buf[UIP_LLH_LEN])
 157          #define FBUF ((uip_tcpip_hdr *)&uip_reassbuf[0])
 158          #define ICMPBUF ((uip_icmpip_hdr *)&uip_buf[UIP_LLH_LEN])
 159          #define UDPBUF ((uip_udpip_hdr *)&uip_buf[UIP_LLH_LEN])
 160          
 161          #if UIP_STATISTICS == 1
 162          struct uip_stats uip_stat;
 163          #define UIP_STAT(s) s
 164          #else
              #define UIP_STAT(s)
              #endif /* UIP_STATISTICS == 1 */
 167          
 168          #if UIP_LOGGING == 1
              #include <stdio.h>
              void uip_log(char *msg);
              #define UIP_LOG(m) uip_log(m)
              #else
 173          #define UIP_LOG(m)
 174          #endif /* UIP_LOGGING == 1 */
 175          
 176          /*-----------------------------------------------------------------------------------*/
 177          void
C51 COMPILER V8.16   UIP                                                                   01/02/2011 16:07:25 PAGE 4   

 178          uip_init(void)
 179          {
 180   1        for(c = 0; c < UIP_LISTENPORTS; ++c) {
 181   2          uip_listenports[c] = 0;
 182   2        }
 183   1        for(c = 0; c < UIP_CONNS; ++c) {
 184   2          uip_conns[c].tcpstateflags = CLOSED;
 185   2        }
 186   1      #if UIP_ACTIVE_OPEN
                lastport = 1024;
              #endif /* UIP_ACTIVE_OPEN */
 189   1      
 190   1      #if UIP_UDP
                for(c = 0; c < UIP_UDP_CONNS; ++c) {
                  uip_udp_conns[c].lport = 0;
                }
              #endif /* UIP_UDP */
 195   1        
 196   1      
 197   1        /* IPv4 initialization. */
 198   1      #if UIP_FIXEDADDR == 0
                uip_hostaddr[0] = uip_hostaddr[1] = 0;
              #endif /* UIP_FIXEDADDR */
 201   1      
 202   1      }
 203          /*-----------------------------------------------------------------------------------*/
 204          #if UIP_ACTIVE_OPEN
              struct uip_conn *
              uip_connect(u16_t *ripaddr, u16_t rport)
              {
                register struct uip_conn *conn, *cconn;
                
                /* Find an unused local port. */
               again:
                ++lastport;
              
                if(lastport >= 32000) {
                  lastport = 4096;
                }
              
                /* Check if this port is already in use, and if so try to find
                   another one. */
                for(c = 0; c < UIP_CONNS; ++c) {
                  conn = &uip_conns[c];
                  if(conn->tcpstateflags != CLOSED &&
                     conn->lport == htons(lastport)) {
                    goto again;
                  }
                }
              
              
                conn = 0;
                for(c = 0; c < UIP_CONNS; ++c) {
                  cconn = &uip_conns[c]; 
                  if(cconn->tcpstateflags == CLOSED) {
                    conn = cconn;
                    break;
                  }
                  if(cconn->tcpstateflags == TIME_WAIT) {
                    if(conn == 0 ||
                       cconn->timer > uip_conn->timer) {
                      conn = cconn;
C51 COMPILER V8.16   UIP                                                                   01/02/2011 16:07:25 PAGE 5   

                    }
                  }
                }
              
                if(conn == 0) {
                  return 0;
                }
                
                conn->tcpstateflags = SYN_SENT;
              
                conn->snd_nxt[0] = iss[0];
                conn->snd_nxt[1] = iss[1];
                conn->snd_nxt[2] = iss[2];
                conn->snd_nxt[3] = iss[3];
              
                conn->initialmss = conn->mss = UIP_TCP_MSS;
                
                conn->len = 1;   /* TCP length of the SYN is one. */
                conn->nrtx = 0;
                conn->timer = 1; /* Send the SYN next time around. */
                conn->rto = UIP_RTO;
                conn->sa = 0;
                conn->sv = 16;
                conn->lport = htons(lastport);
                conn->rport = rport;
                conn->ripaddr[0] = ripaddr[0];
                conn->ripaddr[1] = ripaddr[1];
                
                return conn;
              }
              #endif /* UIP_ACTIVE_OPEN */
 271          /*-----------------------------------------------------------------------------------*/
 272          #if UIP_UDP
              struct uip_udp_conn *
              uip_udp_new(u16_t *ripaddr, u16_t rport)
              {
                register struct uip_udp_conn *conn;
                
                /* Find an unused local port. */
               again:
                ++lastport;
              
                if(lastport >= 32000) {
                  lastport = 4096;
                }
                
                for(c = 0; c < UIP_UDP_CONNS; ++c) {
                  if(uip_udp_conns[c].lport == lastport) {
                    goto again;
                  }
                }
              
              
                conn = 0;
                for(c = 0; c < UIP_UDP_CONNS; ++c) {
                  if(uip_udp_conns[c].lport == 0) {
                    conn = &uip_udp_conns[c]; 
                    break;
                  }
                }
              
                if(conn == 0) {
C51 COMPILER V8.16   UIP                                                                   01/02/2011 16:07:25 PAGE 6   

                  return 0;
                }
                
                conn->lport = HTONS(lastport);
                conn->rport = HTONS(rport);
                conn->ripaddr[0] = ripaddr[0];
                conn->ripaddr[1] = ripaddr[1];
                
                return conn;
              }
              #endif /* UIP_UDP */
 313          /*-----------------------------------------------------------------------------------*/
 314          void
 315          uip_unlisten(u16_t port)
 316          {
 317   1        for(c = 0; c < UIP_LISTENPORTS; ++c) {
 318   2          if(uip_listenports[c] == port) {
 319   3            uip_listenports[c] = 0;
 320   3            return;
 321   3          }
 322   2        }
 323   1      }
 324          /*-----------------------------------------------------------------------------------*/
 325          void
 326          uip_listen(u16_t port)
 327          {
 328   1        for(c = 0; c < UIP_LISTENPORTS; ++c) {
 329   2          if(uip_listenports[c] == 0) {
 330   3            uip_listenports[c] = port;
 331   3            return;
 332   3          }
 333   2        }
 334   1      }
 335          /*-----------------------------------------------------------------------------------*/
 336          /* XXX: IP fragment reassembly: not well-tested. */
 337          
 338          #if UIP_REASSEMBLY
              #define UIP_REASS_BUFSIZE (UIP_BUFSIZE - UIP_LLH_LEN)
              static u8_t uip_reassbuf[UIP_REASS_BUFSIZE];
              static u8_t uip_reassbitmap[UIP_REASS_BUFSIZE / (8 * 8)];
              static const u8_t bitmap_bits[8] = {0xff, 0x7f, 0x3f, 0x1f,
                                                  0x0f, 0x07, 0x03, 0x01};
              static u16_t uip_reasslen;
              static u8_t uip_reassflags;
              #define UIP_REASS_FLAG_LASTFRAG 0x01
              static u8_t uip_reasstmr;
              
              #define IP_HLEN 20
              #define IP_MF   0x20
              
              static u8_t
              uip_reass(void)
              {
                u16_t offset, len;
                u16_t i;
              
                /* If ip_reasstmr is zero, no packet is present in the buffer, so we
                   write the IP header of the fragment into the reassembly
                   buffer. The timer is updated with the maximum age. */
                if(uip_reasstmr == 0) {
                  memcpy(uip_reassbuf, &BUF->vhl, IP_HLEN);
                  uip_reasstmr = UIP_REASS_MAXAGE;
C51 COMPILER V8.16   UIP                                                                   01/02/2011 16:07:25 PAGE 7   

                  uip_reassflags = 0;
                  /* Clear the bitmap. */
                  memset(uip_reassbitmap, sizeof(uip_reassbitmap), 0);
                }
              
                /* Check if the incoming fragment matches the one currently present
                   in the reasembly buffer. If so, we proceed with copying the
                   fragment into the buffer. */
                if(BUF->srcipaddr[0] == FBUF->srcipaddr[0] &&
                   BUF->srcipaddr[1] == FBUF->srcipaddr[1] &&
                   BUF->destipaddr[0] == FBUF->destipaddr[0] &&
                   BUF->destipaddr[1] == FBUF->destipaddr[1] &&
                   BUF->ipid[0] == FBUF->ipid[0] &&
                   BUF->ipid[1] == FBUF->ipid[1]) {
              
                  len = (BUF->len[0] << 8) + BUF->len[1] - (BUF->vhl & 0x0f) * 4;
                  offset = (((BUF->ipoffset[0] & 0x3f) << 8) + BUF->ipoffset[1]) * 8;
              
                  /* If the offset or the offset + fragment length overflows the
                     reassembly buffer, we discard the entire packet. */
                  if(offset > UIP_REASS_BUFSIZE ||
                     offset + len > UIP_REASS_BUFSIZE) {
                    uip_reasstmr = 0;
                    goto nullreturn;
                  }
              
                  /* Copy the fragment into the reassembly buffer, at the right
                     offset. */
                  memcpy(&uip_reassbuf[IP_HLEN + offset],
                         (char *)BUF + (int)((BUF->vhl & 0x0f) * 4),
                         len);
                    
                  /* Update the bitmap. */
                  if(offset / (8 * 8) == (offset + len) / (8 * 8)) {
                    /* If the two endpoints are in the same byte, we only update
                       that byte. */
                           
                    uip_reassbitmap[offset / (8 * 8)] |=
                           bitmap_bits[(offset / 8 ) & 7] &
                           ~bitmap_bits[((offset + len) / 8 ) & 7];
                  } else {
                    /* If the two endpoints are in different bytes, we update the
                       bytes in the endpoints and fill the stuff inbetween with
                       0xff. */
                    uip_reassbitmap[offset / (8 * 8)] |=
                      bitmap_bits[(offset / 8 ) & 7];
                    for(i = 1 + offset / (8 * 8); i < (offset + len) / (8 * 8); ++i) {
                      uip_reassbitmap[i] = 0xff;
                    }      
                    uip_reassbitmap[(offset + len) / (8 * 8)] |=
                      ~bitmap_bits[((offset + len) / 8 ) & 7];
                  }
                  
                  /* If this fragment has the More Fragments flag set to zero, we
                     know that this is the last fragment, so we can calculate the
                     size of the entire packet. We also set the
                     IP_REASS_FLAG_LASTFRAG flag to indicate that we have received
                     the final fragment. */
              
                  if((BUF->ipoffset[0] & IP_MF) == 0) {
                    uip_reassflags |= UIP_REASS_FLAG_LASTFRAG;
                    uip_reasslen = offset + len;
C51 COMPILER V8.16   UIP                                                                   01/02/2011 16:07:25 PAGE 8   

                  }
                  
                  /* Finally, we check if we have a full packet in the buffer. We do
                     this by checking if we have the last fragment and if all bits
                     in the bitmap are set. */
                  if(uip_reassflags & UIP_REASS_FLAG_LASTFRAG) {
                    /* Check all bytes up to and including all but the last byte in
                       the bitmap. */
                    for(i = 0; i < uip_reasslen / (8 * 8) - 1; ++i) {
                      if(uip_reassbitmap[i] != 0xff) {
                        goto nullreturn;
                      }
                    }
                    /* Check the last byte in the bitmap. It should contain just the
                       right amount of bits. */
                    if(uip_reassbitmap[uip_reasslen / (8 * 8)] !=
                       (u8_t)~bitmap_bits[uip_reasslen / 8 & 7]) {
                      goto nullreturn;
                    }
              
                    /* If we have come this far, we have a full packet in the
                       buffer, so we allocate a pbuf and copy the packet into it. We
                       also reset the timer. */
                    uip_reasstmr = 0;
                    memcpy(BUF, FBUF, uip_reasslen);
              
                    /* Pretend to be a "normal" (i.e., not fragmented) IP packet
                       from now on. */
                    BUF->ipoffset[0] = BUF->ipoffset[1] = 0;
                    BUF->len[0] = uip_reasslen >> 8;
                    BUF->len[1] = uip_reasslen & 0xff;
                    BUF->ipchksum = 0;
                    BUF->ipchksum = ~(uip_ipchksum());
              
                    return uip_reasslen;
                  }
                }
              
               nullreturn:
                return 0;
              }
              #endif /* UIP_REASSEMBL */
 468          /*-----------------------------------------------------------------------------------*/
 469          static void
 470          uip_add_rcv_nxt(u16_t n)
 471          {
 472   1        uip_add32(uip_conn->rcv_nxt, n);
 473   1        uip_conn->rcv_nxt[0] = uip_acc32[0];
 474   1        uip_conn->rcv_nxt[1] = uip_acc32[1];
 475   1        uip_conn->rcv_nxt[2] = uip_acc32[2];
 476   1        uip_conn->rcv_nxt[3] = uip_acc32[3];
 477   1      }
 478          /*-----------------------------------------------------------------------------------*/
 479          void
 480          uip_process(u8_t flag)
 481          {
 482   1        register struct uip_conn *uip_connr = uip_conn;
 483   1        
 484   1        uip_appdata = &uip_buf[40 + UIP_LLH_LEN];
 485   1      
 486   1        
 487   1        /* Check if we were invoked because of the perodic timer fireing. */
C51 COMPILER V8.16   UIP                                                                   01/02/2011 16:07:25 PAGE 9   

 488   1        if(flag == UIP_TIMER) {
 489   2      #if UIP_REASSEMBLY
                  if(uip_reasstmr != 0) {
                    --uip_reasstmr;
                  }
              #endif /* UIP_REASSEMBLY */
 494   2          /* Increase the initial sequence number. */
 495   2          if(++iss[3] == 0) {
 496   3            if(++iss[2] == 0) {
 497   4              if(++iss[1] == 0) {
 498   5                ++iss[0];
 499   5              }
 500   4            }
 501   3          }    
 502   2          uip_len = 0;
 503   2          if(uip_connr->tcpstateflags == TIME_WAIT ||
 504   2             uip_connr->tcpstateflags == FIN_WAIT_2) {
 505   3            ++(uip_connr->timer);
 506   3            if(uip_connr->timer == UIP_TIME_WAIT_TIMEOUT) {
 507   4              uip_connr->tcpstateflags = CLOSED;
 508   4            }
 509   3          } else if(uip_connr->tcpstateflags != CLOSED) {
 510   3            /* If the connection has outstanding data, we increase the
 511   3               connection's timer and see if it has reached the RTO value
 512   3               in which case we retransmit. */
 513   3            if(uip_outstanding(uip_connr)) {
 514   4              if(uip_connr->timer-- == 0) {
 515   5                if(uip_connr->nrtx == UIP_MAXRTX ||
 516   5                   ((uip_connr->tcpstateflags == SYN_SENT ||
 517   5                     uip_connr->tcpstateflags == SYN_RCVD) &&
 518   5                    uip_connr->nrtx == UIP_MAXSYNRTX)) {
 519   6                  uip_connr->tcpstateflags = CLOSED;
 520   6      
 521   6                  /* We call UIP_APPCALL() with uip_flags set to
 522   6                     UIP_TIMEDOUT to inform the application that the
 523   6                     connection has timed out. */
 524   6                  uip_flags = UIP_TIMEDOUT;
 525   6                  UIP_APPCALL();
 526   6      
 527   6                  /* We also send a reset packet to the remote host. */
 528   6                  BUF->flags = TCP_RST | TCP_ACK;
 529   6                  goto tcp_send_nodata;
 530   6                }
 531   5      
 532   5                /* Exponential backoff. */
 533   5                uip_connr->timer = UIP_RTO << (uip_connr->nrtx > 4?
 534   5                                               4:
 535   5                                               uip_connr->nrtx);
 536   5                ++(uip_connr->nrtx);
 537   5                
 538   5                /* Ok, so we need to retransmit. We do this differently
 539   5                   depending on which state we are in. In ESTABLISHED, we
 540   5                   call upon the application so that it may prepare the
 541   5                   data for the retransmit. In SYN_RCVD, we resend the
 542   5                   SYNACK that we sent earlier and in LAST_ACK we have to
 543   5                   retransmit our FINACK. */
 544   5                UIP_STAT(++uip_stat.tcp.rexmit);
 545   5                switch(uip_connr->tcpstateflags & TS_MASK) {
 546   6                case SYN_RCVD:
 547   6                  /* In the SYN_RCVD state, we should retransmit our
 548   6                     SYNACK. */
 549   6                  goto tcp_send_synack;
C51 COMPILER V8.16   UIP                                                                   01/02/2011 16:07:25 PAGE 10  

 550   6                  
 551   6      #if UIP_ACTIVE_OPEN
                        case SYN_SENT:
                          /* In the SYN_SENT state, we retransmit out SYN. */
                          BUF->flags = 0;
                          goto tcp_send_syn;
              #endif /* UIP_ACTIVE_OPEN */
 557   6                  
 558   6                case ESTABLISHED:
 559   6                  /* In the ESTABLISHED state, we call upon the application
 560   6                     to do the actual retransmit after which we jump into
 561   6                     the code for sending out the packet (the apprexmit
 562   6                     label). */
 563   6                  uip_len = 0;
 564   6                  uip_slen = 0;
 565   6                  uip_flags = UIP_REXMIT;
 566   6                  UIP_APPCALL();
 567   6                  goto apprexmit;
 568   6                  
 569   6                case FIN_WAIT_1:
 570   6                case CLOSING:
 571   6                case LAST_ACK:
 572   6                  /* In all these states we should retransmit a FINACK. */
 573   6                  goto tcp_send_finack;
 574   6                  
 575   6                }
 576   5              }
 577   4            } else if((uip_connr->tcpstateflags & TS_MASK) == ESTABLISHED) {
 578   4              /* If there was no need for a retransmission, we poll the
 579   4                 application for new data. */
 580   4              uip_len = 0;
 581   4              uip_slen = 0;
 582   4              uip_flags = UIP_POLL;
 583   4              UIP_APPCALL();
 584   4              goto appsend;
 585   4            }
 586   3          }
 587   2          goto drop;
 588   2        }
 589   1      #if UIP_UDP 
                if(flag == UIP_UDP_TIMER) {
                  if(uip_udp_conn->lport != 0) {
                    uip_appdata = &uip_buf[UIP_LLH_LEN + 28];
                    uip_len = uip_slen = 0;
                    uip_flags = UIP_POLL;
                    UIP_UDP_APPCALL();
                    goto udp_send;
                  } else {
                    goto drop;
                  }
                }
              #endif
 602   1      
 603   1        /* This is where the input processing starts. */
 604   1        UIP_STAT(++uip_stat.ip.recv);
 605   1      
 606   1      
 607   1        /* Start of IPv4 input header processing code. */
 608   1        
 609   1        /* Check validity of the IP header. */  
 610   1        if(BUF->vhl != 0x45)  { /* IP version and header length. */
 611   2          UIP_STAT(++uip_stat.ip.drop);
C51 COMPILER V8.16   UIP                                                                   01/02/2011 16:07:25 PAGE 11  

 612   2          UIP_STAT(++uip_stat.ip.vhlerr);
 613   2          UIP_LOG("ip: invalid version or header length.");
 614   2          goto drop;
 615   2        }
 616   1        
 617   1        /* Check the size of the packet. If the size reported to us in
 618   1           uip_len doesn't match the size reported in the IP header, there
 619   1           has been a transmission error and we drop the packet. */
 620   1        
 621   1        if(BUF->len[0] != (uip_len >> 8)) { /* IP length, high byte. */
 622   2          uip_len = (uip_len & 0xff) | (BUF->len[0] << 8);
 623   2        }
 624   1        if(BUF->len[1] != (uip_len & 0xff)) { /* IP length, low byte. */
 625   2          uip_len = (uip_len & 0xff00) | BUF->len[1];
 626   2        }
 627   1      
 628   1        /* Check the fragment flag. */
 629   1        if((BUF->ipoffset[0] & 0x3f) != 0 ||
 630   1           BUF->ipoffset[1] != 0) { 
 631   2      #if UIP_REASSEMBLY
                  uip_len = uip_reass();
                  if(uip_len == 0) {
                    goto drop;
                  }
              #else
 637   2          UIP_STAT(++uip_stat.ip.drop);
 638   2          UIP_STAT(++uip_stat.ip.fragerr);
 639   2          UIP_LOG("ip: fragment dropped.");    
 640   2          goto drop;
 641   2      #endif /* UIP_REASSEMBLY */
 642   2        }
 643   1      
 644   1        /* If we are configured to use ping IP address configuration and
 645   1           hasn't been assigned an IP address yet, we accept all ICMP
 646   1           packets. */
 647   1      #if UIP_PINGADDRCONF
                if((uip_hostaddr[0] | uip_hostaddr[1]) == 0) {
                  if(BUF->proto == UIP_PROTO_ICMP) {
                    UIP_LOG("ip: possible ping config packet received.");
                    goto icmp_input;
                  } else {
                    UIP_LOG("ip: packet dropped since no address assigned.");
                    goto drop;
                  }
                }
              #endif /* UIP_PINGADDRCONF */
 658   1        
 659   1        /* Check if the packet is destined for our IP address. */  
 660   1        if(BUF->destipaddr[0] != uip_hostaddr[0]) {
 661   2          UIP_STAT(++uip_stat.ip.drop);
 662   2          UIP_LOG("ip: packet not for us.");        
 663   2          goto drop;
 664   2        }
 665   1        if(BUF->destipaddr[1] != uip_hostaddr[1]) {
 666   2          UIP_STAT(++uip_stat.ip.drop);
 667   2          UIP_LOG("ip: packet not for us.");        
 668   2          goto drop;
 669   2        }
 670   1      
 671   1        if(uip_ipchksum() != 0xffff) { /* Compute and check the IP header
 672   2                                          checksum. */
 673   2          UIP_STAT(++uip_stat.ip.drop);
C51 COMPILER V8.16   UIP                                                                   01/02/2011 16:07:25 PAGE 12  

 674   2          UIP_STAT(++uip_stat.ip.chkerr);
 675   2          UIP_LOG("ip: bad checksum.");    
 676   2          goto drop;
 677   2        }
 678   1      
 679   1        if(BUF->proto == UIP_PROTO_TCP)  /* Check for TCP packet. If so, jump
 680   1                                           to the tcp_input label. */
 681   1          goto tcp_input;
 682   1      
 683   1      #if UIP_UDP
                if(BUF->proto == UIP_PROTO_UDP)
                  goto udp_input;
              #endif /* UIP_UDP */
 687   1      
 688   1        if(BUF->proto != UIP_PROTO_ICMP) { /* We only allow ICMP packets from
 689   2                                              here. */
 690   2          UIP_STAT(++uip_stat.ip.drop);
 691   2          UIP_STAT(++uip_stat.ip.protoerr);
 692   2          UIP_LOG("ip: neither tcp nor icmp.");        
 693   2          goto drop;
 694   2        }
 695   1        
 696   1       icmp_input:
 697   1        UIP_STAT(++uip_stat.icmp.recv);
 698   1        
 699   1        /* ICMP echo (i.e., ping) processing. This is simple, we only change
 700   1           the ICMP type from ECHO to ECHO_REPLY and adjust the ICMP
 701   1           checksum before we return the packet. */
 702   1        if(ICMPBUF->type != ICMP_ECHO) {
 703   2          UIP_STAT(++uip_stat.icmp.drop);
 704   2          UIP_STAT(++uip_stat.icmp.typeerr);
 705   2          UIP_LOG("icmp: not icmp echo.");
 706   2          goto drop;
 707   2        }
 708   1      
 709   1        /* If we are configured to use ping IP address assignment, we use
 710   1           the destination IP address of this ping packet and assign it to
 711   1           ourself. */
 712   1      #if UIP_PINGADDRCONF
                if((uip_hostaddr[0] | uip_hostaddr[1]) == 0) {
                  uip_hostaddr[0] = BUF->destipaddr[0];
                  uip_hostaddr[1] = BUF->destipaddr[1];
                }
              #endif /* UIP_PINGADDRCONF */  
 718   1        
 719   1        ICMPBUF->type = ICMP_ECHO_REPLY;
 720   1        
 721   1        if(ICMPBUF->icmpchksum >= HTONS(0xffff - (ICMP_ECHO << 8))) {
 722   2          ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8) + 1;
 723   2        } else {
 724   2          ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8);
 725   2        }
 726   1        
 727   1        /* Swap IP addresses. */
 728   1        tmp16 = BUF->destipaddr[0];
 729   1        BUF->destipaddr[0] = BUF->srcipaddr[0];
 730   1        BUF->srcipaddr[0] = tmp16;
 731   1        tmp16 = BUF->destipaddr[1];
 732   1        BUF->destipaddr[1] = BUF->srcipaddr[1];
 733   1        BUF->srcipaddr[1] = tmp16;
 734   1      
 735   1        UIP_STAT(++uip_stat.icmp.sent);
C51 COMPILER V8.16   UIP                                                                   01/02/2011 16:07:25 PAGE 13  

 736   1        goto send;
 737   1      
 738   1        /* End of IPv4 input header processing code. */
 739   1        
 740   1      
 741   1      #if UIP_UDP
                /* UDP input processing. */
               udp_input:
                /* UDP processing is really just a hack. We don't do anything to the
                   UDP/IP headers, but let the UDP application do all the hard
                   work. If the application sets uip_slen, it has a packet to
                   send. */
              #if UIP_UDP_CHECKSUMS
                if(uip_udpchksum() != 0xffff) { 
                  UIP_STAT(++uip_stat.udp.drop);
                  UIP_STAT(++uip_stat.udp.chkerr);
                  UIP_LOG("udp: bad checksum.");    
                  goto drop;
                }  
              #endif /* UIP_UDP_CHECKSUMS */
              
                /* Demultiplex this UDP packet between the UDP "connections". */
                for(uip_udp_conn = &uip_udp_conns[0];
                    uip_udp_conn < &uip_udp_conns[UIP_UDP_CONNS];
                    ++uip_udp_conn) {
                  if(uip_udp_conn->lport != 0 &&
                     UDPBUF->destport == uip_udp_conn->lport &&
                     (uip_udp_conn->rport == 0 ||
                      UDPBUF->srcport == uip_udp_conn->rport) &&
                     BUF->srcipaddr[0] == uip_udp_conn->ripaddr[0] &&
                     BUF->srcipaddr[1] == uip_udp_conn->ripaddr[1]) {
                    goto udp_found; 
                  }
                }
                goto drop;
                
               udp_found:
                uip_len = uip_len - 28;
                uip_appdata = &uip_buf[UIP_LLH_LEN + 28];
                uip_flags = UIP_NEWDATA;
                uip_slen = 0;
                UIP_UDP_APPCALL();
               udp_send:
                if(uip_slen == 0) {
                  goto drop;      
                }
                uip_len = uip_slen + 28;
              
                BUF->len[0] = (uip_len >> 8);
                BUF->len[1] = (uip_len & 0xff);
                
                BUF->proto = UIP_PROTO_UDP;
              
                UDPBUF->udplen = HTONS(uip_slen + 8);
                UDPBUF->udpchksum = 0;
              #if UIP_UDP_CHECKSUMS 
                /* Calculate UDP checksum. */
                UDPBUF->udpchksum = ~(uip_udpchksum());
                if(UDPBUF->udpchksum == 0) {
                  UDPBUF->udpchksum = 0xffff;
                }
              #endif /* UIP_UDP_CHECKSUMS */
C51 COMPILER V8.16   UIP                                                                   01/02/2011 16:07:25 PAGE 14  

              
                BUF->srcport  = uip_udp_conn->lport;
                BUF->destport = uip_udp_conn->rport;
              
                BUF->srcipaddr[0] = uip_hostaddr[0];
                BUF->srcipaddr[1] = uip_hostaddr[1];
                BUF->destipaddr[0] = uip_udp_conn->ripaddr[0];
                BUF->destipaddr[1] = uip_udp_conn->ripaddr[1];
               
                uip_appdata = &uip_buf[UIP_LLH_LEN + 40];
                goto ip_send_nolen;
              #endif /* UIP_UDP */
 810   1        
 811   1        /* TCP input processing. */  
 812   1       tcp_input:
 813   1        UIP_STAT(++uip_stat.tcp.recv);
 814   1      
 815   1        /* Start of TCP input header processing code. */
 816   1        
 817   1        if(uip_tcpchksum() != 0xffff) {   /* Compute and check the TCP
 818   2                                             checksum. */
 819   2          UIP_STAT(++uip_stat.tcp.drop);
 820   2          UIP_STAT(++uip_stat.tcp.chkerr);
 821   2          UIP_LOG("tcp: bad checksum.");    
 822   2          goto drop;
 823   2        }
 824   1        
 825   1        /* Demultiplex this segment. */
 826   1        /* First check any active connections. */
 827   1        for(uip_connr = &uip_conns[0]; uip_connr < &uip_conns[UIP_CONNS]; ++uip_connr) {
 828   2          if(uip_connr->tcpstateflags != CLOSED &&
 829   2             BUF->destport == uip_connr->lport &&
 830   2             BUF->srcport == uip_connr->rport &&
 831   2             BUF->srcipaddr[0] == uip_connr->ripaddr[0] &&
 832   2             BUF->srcipaddr[1] == uip_connr->ripaddr[1]) {
 833   3            goto found;    
 834   3          }
 835   2        }
 836   1      
 837   1        /* If we didn't find and active connection that expected the packet,
 838   1           either this packet is an old duplicate, or this is a SYN packet
 839   1           destined for a connection in LISTEN. If the SYN flag isn't set,
 840   1           it is an old packet and we send a RST. */
 841   1        if((BUF->flags & TCP_CTL) != TCP_SYN)
 842   1          goto reset;
 843   1        
 844   1        tmp16 = BUF->destport;
 845   1        /* Next, check listening connections. */  
 846   1        for(c = 0; c < UIP_LISTENPORTS; ++c) {
 847   2          if(tmp16 == uip_listenports[c])
 848   2            goto found_listen;
 849   2        }
 850   1        
 851   1        /* No matching connection found, so we send a RST packet. */
 852   1        UIP_STAT(++uip_stat.tcp.synrst);
 853   1       reset:
 854   1      
 855   1        /* We do not send resets in response to resets. */
 856   1        if(BUF->flags & TCP_RST) 
 857   1          goto drop;
 858   1      
 859   1        UIP_STAT(++uip_stat.tcp.rst);
C51 COMPILER V8.16   UIP                                                                   01/02/2011 16:07:25 PAGE 15  

 860   1        
 861   1        BUF->flags = TCP_RST | TCP_ACK;
 862   1        uip_len = 40;
 863   1        BUF->tcpoffset = 5 << 4;
 864   1      
 865   1        /* Flip the seqno and ackno fields in the TCP header. */
 866   1        c = BUF->seqno[3];
 867   1        BUF->seqno[3] = BUF->ackno[3];  
 868   1        BUF->ackno[3] = c;
 869   1        
 870   1        c = BUF->seqno[2];
 871   1        BUF->seqno[2] = BUF->ackno[2];  
 872   1        BUF->ackno[2] = c;
 873   1        
 874   1        c = BUF->seqno[1];
 875   1        BUF->seqno[1] = BUF->ackno[1];
 876   1        BUF->ackno[1] = c;
 877   1        
 878   1        c = BUF->seqno[0];
 879   1        BUF->seqno[0] = BUF->ackno[0];  
 880   1        BUF->ackno[0] = c;
 881   1      
 882   1        /* We also have to increase the sequence number we are
 883   1           acknowledging. If the least significant byte overflowed, we need
 884   1           to propagate the carry to the other bytes as well. */
 885   1        if(++BUF->ackno[3] == 0) {
 886   2          if(++BUF->ackno[2] == 0) {
 887   3            if(++BUF->ackno[1] == 0) {
 888   4              ++BUF->ackno[0];
 889   4            }
 890   3          }
 891   2        }
 892   1       
 893   1        /* Swap port numbers. */
 894   1        tmp16 = BUF->srcport;
 895   1        BUF->srcport = BUF->destport;
 896   1        BUF->destport = tmp16;
 897   1        
 898   1        /* Swap IP addresses. */
 899   1        tmp16 = BUF->destipaddr[0];
 900   1        BUF->destipaddr[0] = BUF->srcipaddr[0];
 901   1        BUF->srcipaddr[0] = tmp16;
 902   1        tmp16 = BUF->destipaddr[1];
 903   1        BUF->destipaddr[1] = BUF->srcipaddr[1];
 904   1        BUF->srcipaddr[1] = tmp16;
 905   1      
 906   1        
 907   1        /* And send out the RST packet! */
 908   1        goto tcp_send_noconn;
 909   1      
 910   1        /* This label will be jumped to if we matched the incoming packet
 911   1           with a connection in LISTEN. In that case, we should create a new
 912   1           connection and send a SYNACK in return. */
 913   1       found_listen:
 914   1        /* First we check if there are any connections avaliable. Unused
 915   1           connections are kept in the same table as used connections, but
 916   1           unused ones have the tcpstate set to CLOSED. Also, connections in
 917   1           TIME_WAIT are kept track of and we'll use the oldest one if no
 918   1           CLOSED connections are found. Thanks to Eddie C. Dost for a very
 919   1           nice algorithm for the TIME_WAIT search. */
 920   1        uip_connr = 0;
 921   1        for(c = 0; c < UIP_CONNS; ++c) {
C51 COMPILER V8.16   UIP                                                                   01/02/2011 16:07:25 PAGE 16  

 922   2          if(uip_conns[c].tcpstateflags == CLOSED) {
 923   3            uip_connr = &uip_conns[c];
 924   3            break;
 925   3          }
 926   2          if(uip_conns[c].tcpstateflags == TIME_WAIT) {
 927   3            if(uip_connr == 0 ||
 928   3               uip_conns[c].timer > uip_connr->timer) {
 929   4              uip_connr = &uip_conns[c];
 930   4            }
 931   3          }
 932   2        }
 933   1      
 934   1        if(uip_connr == 0) {
 935   2          /* All connections are used already, we drop packet and hope that
 936   2             the remote end will retransmit the packet at a time when we
 937   2             have more spare connections. */
 938   2          UIP_STAT(++uip_stat.tcp.syndrop);
 939   2          UIP_LOG("tcp: found no unused connections.");
 940   2          goto drop;
 941   2        }
 942   1        uip_conn = uip_connr;
 943   1        
 944   1        /* Fill in the necessary fields for the new connection. */
 945   1        uip_connr->rto = uip_connr->timer = UIP_RTO;
 946   1        uip_connr->sa = 0;
 947   1        uip_connr->sv = 4;  
 948   1        uip_connr->nrtx = 0;
 949   1        uip_connr->lport = BUF->destport;
 950   1        uip_connr->rport = BUF->srcport;
 951   1        uip_connr->ripaddr[0] = BUF->srcipaddr[0];
 952   1        uip_connr->ripaddr[1] = BUF->srcipaddr[1];
 953   1        uip_connr->tcpstateflags = SYN_RCVD;
 954   1      
 955   1        uip_connr->snd_nxt[0] = iss[0];
 956   1        uip_connr->snd_nxt[1] = iss[1];
 957   1        uip_connr->snd_nxt[2] = iss[2];
 958   1        uip_connr->snd_nxt[3] = iss[3];
 959   1        uip_connr->len = 1;
 960   1      
 961   1        /* rcv_nxt should be the seqno from the incoming packet + 1. */
 962   1        uip_connr->rcv_nxt[3] = BUF->seqno[3];
 963   1        uip_connr->rcv_nxt[2] = BUF->seqno[2];
 964   1        uip_connr->rcv_nxt[1] = BUF->seqno[1];
 965   1        uip_connr->rcv_nxt[0] = BUF->seqno[0];
 966   1        uip_add_rcv_nxt(1);
 967   1      
 968   1        /* Parse the TCP MSS option, if present. */
 969   1        if((BUF->tcpoffset & 0xf0) > 0x50) {
 970   2          for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
 971   3            opt = uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + c];
 972   3            if(opt == 0x00) {
 973   4              /* End of options. */   
 974   4              break;
 975   4            } else if(opt == 0x01) {
 976   4              ++c;
 977   4              /* NOP option. */
 978   4            } else if(opt == 0x02 &&
 979   3                      uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0x04) {
 980   4              /* An MSS option with the right option length. */       
 981   4              tmp16 = ((u16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 982   4                (u16_t)uip_buf[40 + UIP_LLH_LEN + 3 + c];
 983   4              uip_connr->initialmss = uip_connr->mss =
C51 COMPILER V8.16   UIP                                                                   01/02/2011 16:07:25 PAGE 17  

 984   4                tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;
 985   4              
 986   4              /* And we are done processing options. */
 987   4              break;
 988   4            } else {
 989   4              /* All other options have a length field, so that we easily
 990   4                 can skip past them. */
 991   4              if(uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0) {
 992   5                /* If the length field is zero, the options are malformed
 993   5                   and we don't process them further. */
 994   5                break;
 995   5              }
 996   4              c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
 997   4            }      
 998   3          }
 999   2        }
1000   1        
1001   1        /* Our response will be a SYNACK. */
1002   1      #if UIP_ACTIVE_OPEN
               tcp_send_synack:
                BUF->flags = TCP_ACK;    
                
               tcp_send_syn:
                BUF->flags |= TCP_SYN;    
              #else /* UIP_ACTIVE_OPEN */
1009   1       tcp_send_synack:
1010   1        BUF->flags = TCP_SYN | TCP_ACK;    
1011   1      #endif /* UIP_ACTIVE_OPEN */
1012   1        
1013   1        /* We send out the TCP Maximum Segment Size option with our
1014   1           SYNACK. */
1015   1        BUF->optdata[0] = 2;
1016   1        BUF->optdata[1] = 4;
1017   1        BUF->optdata[2] = (UIP_TCP_MSS) / 256;
1018   1        BUF->optdata[3] = (UIP_TCP_MSS) & 255;
1019   1        uip_len = 44;
1020   1        BUF->tcpoffset = 6 << 4;
1021   1        goto tcp_send;
1022   1      
1023   1        /* This label will be jumped to if we found an active connection. */
1024   1       found:
1025   1        uip_conn = uip_connr;
1026   1        uip_flags = 0;
1027   1      
1028   1        /* We do a very naive form of TCP reset processing; we just accept
1029   1           any RST and kill our connection. We should in fact check if the
1030   1           sequence number of this reset is wihtin our advertised window
1031   1           before we accept the reset. */
1032   1        if(BUF->flags & TCP_RST) {
1033   2          uip_connr->tcpstateflags = CLOSED;
1034   2          UIP_LOG("tcp: got reset, aborting connection.");
1035   2          uip_flags = UIP_ABORT;
1036   2          UIP_APPCALL();
1037   2          goto drop;
1038   2        }      
1039   1        /* Calculated the length of the data, if the application has sent
1040   1           any data to us. */
1041   1        c = (BUF->tcpoffset >> 4) << 2;
1042   1        /* uip_len will contain the length of the actual TCP data. This is
1043   1           calculated by subtracing the length of the TCP header (in
1044   1           c) and the length of the IP header (20 bytes). */
1045   1        uip_len = uip_len - c - 20;
C51 COMPILER V8.16   UIP                                                                   01/02/2011 16:07:25 PAGE 18  

1046   1      
1047   1        /* First, check if the sequence number of the incoming packet is
1048   1           what we're expecting next. If not, we send out an ACK with the
1049   1           correct numbers in. */
1050   1        if(uip_len > 0 &&
1051   1           (BUF->seqno[0] != uip_connr->rcv_nxt[0] ||
1052   1            BUF->seqno[1] != uip_connr->rcv_nxt[1] ||
1053   1            BUF->seqno[2] != uip_connr->rcv_nxt[2] ||
1054   1            BUF->seqno[3] != uip_connr->rcv_nxt[3])) {
1055   2          goto tcp_send_ack;
1056   2        }
1057   1      
1058   1        /* Next, check if the incoming segment acknowledges any outstanding
1059   1           data. If so, we update the sequence number, reset the length of
1060   1           the outstanding data, calculate RTT estimations, and reset the
1061   1           retransmission timer. */
1062   1        if((BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
1063   2          uip_add32(uip_connr->snd_nxt, uip_connr->len);
1064   2          if(BUF->ackno[0] == uip_acc32[0] &&
1065   2             BUF->ackno[1] == uip_acc32[1] &&
1066   2             BUF->ackno[2] == uip_acc32[2] &&
1067   2             BUF->ackno[3] == uip_acc32[3]) {
1068   3            /* Update sequence number. */
1069   3            uip_connr->snd_nxt[0] = uip_acc32[0];
1070   3            uip_connr->snd_nxt[1] = uip_acc32[1];
1071   3            uip_connr->snd_nxt[2] = uip_acc32[2];
1072   3            uip_connr->snd_nxt[3] = uip_acc32[3];
1073   3              
1074   3      
1075   3            /* Do RTT estimation, unless we have done retransmissions. */
1076   3            if(uip_connr->nrtx == 0) {
1077   4              signed char m;
1078   4              m = uip_connr->rto - uip_connr->timer;
1079   4              /* This is taken directly from VJs original code in his paper */
1080   4              m = m - (uip_connr->sa >> 3);
1081   4              uip_connr->sa += m;
1082   4              if(m < 0) {
1083   5                m = -m;
1084   5              }
1085   4              m = m - (uip_connr->sv >> 2);
1086   4              uip_connr->sv += m;
1087   4              uip_connr->rto = (uip_connr->sa >> 3) + uip_connr->sv;
1088   4      
1089   4            }
1090   3            /* Set the acknowledged flag. */
1091   3            uip_flags = UIP_ACKDATA;
1092   3            /* Reset the retransmission timer. */
1093   3            uip_connr->timer = uip_connr->rto;
1094   3          }
1095   2          
1096   2        }
1097   1      
1098   1        /* Do different things depending on in what state the connection is. */
1099   1        switch(uip_connr->tcpstateflags & TS_MASK) {
1100   2          /* CLOSED and LISTEN are not handled here. CLOSE_WAIT is not
1101   2              implemented, since we force the application to close when the
1102   2              peer sends a FIN (hence the application goes directly from
1103   2              ESTABLISHED to LAST_ACK). */
1104   2        case SYN_RCVD:
1105   2          /* In SYN_RCVD we have sent out a SYNACK in response to a SYN, and
1106   2             we are waiting for an ACK that acknowledges the data we sent
1107   2             out the last time. Therefore, we want to have the UIP_ACKDATA
C51 COMPILER V8.16   UIP                                                                   01/02/2011 16:07:25 PAGE 19  

1108   2             flag set. If so, we enter the ESTABLISHED state. */
1109   2          if(uip_flags & UIP_ACKDATA) {
1110   3            uip_connr->tcpstateflags = ESTABLISHED;
1111   3            uip_flags = UIP_CONNECTED;
1112   3            uip_connr->len = 0;
1113   3            if(uip_len > 0) {
1114   4              uip_flags |= UIP_NEWDATA;
1115   4              uip_add_rcv_nxt(uip_len);
1116   4            }
1117   3            uip_slen = 0;
1118   3            UIP_APPCALL();
1119   3            goto appsend;
1120   3          }
1121   2          goto drop;
1122   2      #if UIP_ACTIVE_OPEN
                case SYN_SENT:
                  /* In SYN_SENT, we wait for a SYNACK that is sent in response to
                     our SYN. The rcv_nxt is set to sequence number in the SYNACK
                     plus one, and we send an ACK. We move into the ESTABLISHED
                     state. */
                  if((uip_flags & UIP_ACKDATA) &&
                     BUF->flags == (TCP_SYN | TCP_ACK)) {
              
                    /* Parse the TCP MSS option, if present. */
                    if((BUF->tcpoffset & 0xf0) > 0x50) {
                      for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
                        opt = uip_buf[40 + UIP_LLH_LEN + c];
                        if(opt == 0x00) {
                          /* End of options. */       
                          break;
                        } else if(opt == 0x01) {
                          ++c;
                          /* NOP option. */
                        } else if(opt == 0x02 &&
                                  uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0x04) {
                          /* An MSS option with the right option length. */
                          tmp16 = (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
                            uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 3 + c];
                          uip_connr->initialmss =
                            uip_connr->mss = tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;
              
                          /* And we are done processing options. */
                          break;
                        } else {
                          /* All other options have a length field, so that we easily
                             can skip past them. */
                          if(uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0) {
                            /* If the length field is zero, the options are malformed
                               and we don't process them further. */
                            break;
                          }
                          c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
                        }      
                      }
                    }
                    uip_connr->tcpstateflags = ESTABLISHED;      
                    uip_connr->rcv_nxt[0] = BUF->seqno[0];
                    uip_connr->rcv_nxt[1] = BUF->seqno[1];
                    uip_connr->rcv_nxt[2] = BUF->seqno[2];
                    uip_connr->rcv_nxt[3] = BUF->seqno[3];
                    uip_add_rcv_nxt(1);
                    uip_flags = UIP_CONNECTED | UIP_NEWDATA;
C51 COMPILER V8.16   UIP                                                                   01/02/2011 16:07:25 PAGE 20  

                    uip_connr->len = 0;
                    uip_len = 0;
                    uip_slen = 0;
                    UIP_APPCALL();
                    goto appsend;
                  }
                  goto reset;
              #endif /* UIP_ACTIVE_OPEN */
1178   2          
1179   2        case ESTABLISHED:
1180   2          /* In the ESTABLISHED state, we call upon the application to feed
1181   2          data into the uip_buf. If the UIP_ACKDATA flag is set, the
1182   2          application should put new data into the buffer, otherwise we are
1183   2          retransmitting an old segment, and the application should put that
1184   2          data into the buffer.
1185   2      
1186   2          If the incoming packet is a FIN, we should close the connection on
1187   2          this side as well, and we send out a FIN and enter the LAST_ACK
1188   2          state. We require that there is no outstanding data; otherwise the
1189   2          sequence numbers will be screwed up. */
1190   2      
1191   2          if(BUF->flags & TCP_FIN) {
1192   3            if(uip_outstanding(uip_connr)) {
1193   4              goto drop;
1194   4            }
1195   3            uip_add_rcv_nxt(1 + uip_len);      
1196   3            uip_flags = UIP_CLOSE;
1197   3            if(uip_len > 0) {
1198   4              uip_flags |= UIP_NEWDATA;
1199   4            }
1200   3            UIP_APPCALL();
1201   3            uip_connr->len = 1;
1202   3            uip_connr->tcpstateflags = LAST_ACK;
1203   3            uip_connr->nrtx = 0;
1204   3          tcp_send_finack:
1205   3            BUF->flags = TCP_FIN | TCP_ACK;      
1206   3            goto tcp_send_nodata;
1207   3          }
1208   2      
1209   2          /* Check the URG flag. If this is set, the segment carries urgent
1210   2             data that we must pass to the application. */
1211   2          if(BUF->flags & TCP_URG) {
1212   3      #if UIP_URGDATA > 0
1213   3            uip_urglen = (BUF->urgp[0] << 8) | BUF->urgp[1];
1214   3            if(uip_urglen > uip_len) {
1215   4              /* There is more urgent data in the next segment to come. */
1216   4              uip_urglen = uip_len;
1217   4            }
1218   3            uip_add_rcv_nxt(uip_urglen);
1219   3            uip_len -= uip_urglen;
1220   3            uip_urgdata = uip_appdata;
1221   3            uip_appdata += uip_urglen;
1222   3          } else {
1223   3            uip_urglen = 0;
1224   3      #endif /* UIP_URGDATA > 0 */
1225   3            uip_appdata += (BUF->urgp[0] << 8) | BUF->urgp[1];
1226   3            uip_len -= (BUF->urgp[0] << 8) | BUF->urgp[1];
1227   3          }
1228   2          
1229   2          
1230   2          /* If uip_len > 0 we have TCP data in the packet, and we flag this
1231   2             by setting the UIP_NEWDATA flag and update the sequence number
C51 COMPILER V8.16   UIP                                                                   01/02/2011 16:07:25 PAGE 21  

1232   2             we acknowledge. If the application has stopped the dataflow
1233   2             using uip_stop(), we must not accept any data packets from the
1234   2             remote host. */
1235   2          if(uip_len > 0 && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
1236   3            uip_flags |= UIP_NEWDATA;
1237   3            uip_add_rcv_nxt(uip_len);
1238   3          }
1239   2      
1240   2          /* Check if the available buffer space advertised by the other end
1241   2             is smaller than the initial MSS for this connection. If so, we
1242   2             set the current MSS to the window size to ensure that the
1243   2             application does not send more data than the other end can
1244   2             handle.
1245   2      
1246   2             If the remote host advertises a zero window, we set the MSS to
1247   2             the initial MSS so that the application will send an entire MSS
1248   2             of data. This data will not be acknowledged by the receiver,
1249   2             and the application will retransmit it. This is called the
1250   2             "persistent timer" and uses the retransmission mechanim.
1251   2          */
1252   2          tmp16 = ((u16_t)BUF->wnd[0] << 8) + (u16_t)BUF->wnd[1];
1253   2          if(tmp16 > uip_connr->initialmss ||
1254   2             tmp16 == 0) {
1255   3            tmp16 = uip_connr->initialmss;
1256   3          }
1257   2          uip_connr->mss = tmp16;
1258   2      
1259   2          /* If this packet constitutes an ACK for outstanding data (flagged
1260   2             by the UIP_ACKDATA flag, we should call the application since it
1261   2             might want to send more data. If the incoming packet had data
1262   2             from the peer (as flagged by the UIP_NEWDATA flag), the
1263   2             application must also be notified.
1264   2      
1265   2             When the application is called, the global variable uip_len
1266   2             contains the length of the incoming data. The application can
1267   2             access the incoming data through the global pointer
1268   2             uip_appdata, which usually points 40 bytes into the uip_buf
1269   2             array.
1270   2      
1271   2             If the application wishes to send any data, this data should be
1272   2             put into the uip_appdata and the length of the data should be
1273   2             put into uip_len. If the application don't have any data to
1274   2             send, uip_len must be set to 0. */
1275   2          if(uip_flags & (UIP_NEWDATA | UIP_ACKDATA)) {
1276   3            uip_slen = 0;
1277   3            UIP_APPCALL();
1278   3      
1279   3          appsend:
1280   3            
1281   3            if(uip_flags & UIP_ABORT) {
1282   4              uip_slen = 0;
1283   4              uip_connr->tcpstateflags = CLOSED;
1284   4              BUF->flags = TCP_RST | TCP_ACK;
1285   4              goto tcp_send_nodata;
1286   4            }
1287   3      
1288   3            if(uip_flags & UIP_CLOSE) {
1289   4              uip_slen = 0;
1290   4              uip_connr->len = 1;
1291   4              uip_connr->tcpstateflags = FIN_WAIT_1;
1292   4              uip_connr->nrtx = 0;
1293   4              BUF->flags = TCP_FIN | TCP_ACK;
C51 COMPILER V8.16   UIP                                                                   01/02/2011 16:07:25 PAGE 22  

1294   4              goto tcp_send_nodata;   
1295   4            }
1296   3      
1297   3            /* If uip_slen > 0, the application has data to be sent. */
1298   3            if(uip_slen > 0) {
1299   4      
1300   4              /* If the connection has acknowledged data, the contents of
1301   4                 the ->len variable should be discarded. */ 
1302   4              if((uip_flags & UIP_ACKDATA) != 0) {
1303   5                uip_connr->len = 0;
1304   5              }
1305   4      
1306   4              /* If the ->len variable is non-zero the connection has
1307   4                 already data in transit and cannot send anymore right
1308   4                 now. */
1309   4              if(uip_connr->len == 0) {
1310   5      
1311   5                /* The application cannot send more than what is allowed by
1312   5                   the mss (the minumum of the MSS and the available
1313   5                   window). */
1314   5                if(uip_slen > uip_connr->mss) {
1315   6                  uip_slen = uip_connr->mss;
1316   6                }
1317   5      
1318   5                /* Remember how much data we send out now so that we know
1319   5                   when everything has been acknowledged. */
1320   5                uip_connr->len = uip_slen;
1321   5              } else {
1322   5      
1323   5                /* If the application already had unacknowledged data, we
1324   5                   make sure that the application does not send (i.e.,
1325   5                   retransmit) out more than it previously sent out. */
1326   5                uip_slen = uip_connr->len;
1327   5              }
1328   4            } else {
1329   4              uip_connr->len = 0;
1330   4            }
1331   3            uip_connr->nrtx = 0;
1332   3          apprexmit:
1333   3            uip_appdata = uip_sappdata;
1334   3            
1335   3            /* If the application has data to be sent, or if the incoming
1336   3               packet had new data in it, we must send out a packet. */
1337   3            if(uip_slen > 0 && uip_connr->len > 0) {
1338   4              /* Add the length of the IP and TCP headers. */
1339   4              uip_len = uip_connr->len + UIP_TCPIP_HLEN;
1340   4              /* We always set the ACK flag in response packets. */
1341   4              BUF->flags = TCP_ACK | TCP_PSH;
1342   4              /* Send the packet. */
1343   4              goto tcp_send_noopts;
1344   4            }
1345   3            /* If there is no data to send, just send out a pure ACK if
1346   3               there is newdata. */
1347   3            if(uip_flags & UIP_NEWDATA) {
1348   4              uip_len = UIP_TCPIP_HLEN;
1349   4              BUF->flags = TCP_ACK;
1350   4              goto tcp_send_noopts;
1351   4            }
1352   3          }
1353   2          goto drop;
1354   2        case LAST_ACK:
1355   2          /* We can close this connection if the peer has acknowledged our
C51 COMPILER V8.16   UIP                                                                   01/02/2011 16:07:25 PAGE 23  

1356   2             FIN. This is indicated by the UIP_ACKDATA flag. */     
1357   2          if(uip_flags & UIP_ACKDATA) {
1358   3            uip_connr->tcpstateflags = CLOSED;
1359   3            uip_flags = UIP_CLOSE;
1360   3            UIP_APPCALL();
1361   3          }
1362   2          break;
1363   2          
1364   2        case FIN_WAIT_1:
1365   2          /* The application has closed the connection, but the remote host
1366   2             hasn't closed its end yet. Thus we do nothing but wait for a
1367   2             FIN from the other side. */
1368   2          if(uip_len > 0) {
1369   3            uip_add_rcv_nxt(uip_len);
1370   3          }
1371   2          if(BUF->flags & TCP_FIN) {
1372   3            if(uip_flags & UIP_ACKDATA) {
1373   4              uip_connr->tcpstateflags = TIME_WAIT;
1374   4              uip_connr->timer = 0;
1375   4              uip_connr->len = 0;
1376   4            } else {
1377   4              uip_connr->tcpstateflags = CLOSING;
1378   4            }
1379   3            uip_add_rcv_nxt(1);
1380   3            uip_flags = UIP_CLOSE;
1381   3            UIP_APPCALL();
1382   3            goto tcp_send_ack;
1383   3          } else if(uip_flags & UIP_ACKDATA) {
1384   3            uip_connr->tcpstateflags = FIN_WAIT_2;
1385   3            uip_connr->len = 0;
1386   3            goto drop;
1387   3          }
1388   2          if(uip_len > 0) {
1389   3            goto tcp_send_ack;
1390   3          }
1391   2          goto drop;
1392   2            
1393   2        case FIN_WAIT_2:
1394   2          if(uip_len > 0) {
1395   3            uip_add_rcv_nxt(uip_len);
1396   3          }
1397   2          if(BUF->flags & TCP_FIN) {
1398   3            uip_connr->tcpstateflags = TIME_WAIT;
1399   3            uip_connr->timer = 0;
1400   3            uip_add_rcv_nxt(1);
1401   3            uip_flags = UIP_CLOSE;
1402   3            UIP_APPCALL();
1403   3            goto tcp_send_ack;
1404   3          }
1405   2          if(uip_len > 0) {
1406   3            goto tcp_send_ack;
1407   3          }
1408   2          goto drop;
1409   2      
1410   2        case TIME_WAIT:
1411   2          goto tcp_send_ack;
1412   2          
1413   2        case CLOSING:
1414   2          if(uip_flags & UIP_ACKDATA) {
1415   3            uip_connr->tcpstateflags = TIME_WAIT;
1416   3            uip_connr->timer = 0;
1417   3          }
C51 COMPILER V8.16   UIP                                                                   01/02/2011 16:07:25 PAGE 24  

1418   2        }  
1419   1        goto drop;
1420   1        
1421   1      
1422   1        /* We jump here when we are ready to send the packet, and just want
1423   1           to set the appropriate TCP sequence numbers in the TCP header. */
1424   1       tcp_send_ack:
1425   1        BUF->flags = TCP_ACK;
1426   1       tcp_send_nodata:
1427   1        uip_len = 40;
1428   1       tcp_send_noopts:
1429   1        BUF->tcpoffset = 5 << 4;
1430   1       tcp_send:
1431   1        /* We're done with the input processing. We are now ready to send a
1432   1           reply. Our job is to fill in all the fields of the TCP and IP
1433   1           headers before calculating the checksum and finally send the
1434   1           packet. */
1435   1        BUF->ackno[0] = uip_connr->rcv_nxt[0];
1436   1        BUF->ackno[1] = uip_connr->rcv_nxt[1];
1437   1        BUF->ackno[2] = uip_connr->rcv_nxt[2];
1438   1        BUF->ackno[3] = uip_connr->rcv_nxt[3];
1439   1        
1440   1        BUF->seqno[0] = uip_connr->snd_nxt[0];
1441   1        BUF->seqno[1] = uip_connr->snd_nxt[1];
1442   1        BUF->seqno[2] = uip_connr->snd_nxt[2];
1443   1        BUF->seqno[3] = uip_connr->snd_nxt[3];
1444   1      
1445   1        BUF->proto = UIP_PROTO_TCP;
1446   1        
1447   1        BUF->srcport  = uip_connr->lport;
1448   1        BUF->destport = uip_connr->rport;
1449   1      
1450   1        BUF->srcipaddr[0] = uip_hostaddr[0];
1451   1        BUF->srcipaddr[1] = uip_hostaddr[1];
1452   1        BUF->destipaddr[0] = uip_connr->ripaddr[0];
1453   1        BUF->destipaddr[1] = uip_connr->ripaddr[1];
1454   1       
1455   1      
1456   1        if(uip_connr->tcpstateflags & UIP_STOPPED) {
1457   2          /* If the connection has issued uip_stop(), we advertise a zero
1458   2             window so that the remote host will stop sending data. */
1459   2          BUF->wnd[0] = BUF->wnd[1] = 0;
1460   2        } else {
1461   2          BUF->wnd[0] = ((UIP_RECEIVE_WINDOW) >> 8);
1462   2          BUF->wnd[1] = ((UIP_RECEIVE_WINDOW) & 0xff); 
1463   2        }
1464   1      
1465   1       tcp_send_noconn:
1466   1      
1467   1        BUF->len[0] = (uip_len >> 8);
1468   1        BUF->len[1] = (uip_len & 0xff);
1469   1      
1470   1        /* Calculate TCP checksum. */
1471   1        BUF->tcpchksum = 0;
1472   1        BUF->tcpchksum = ~(uip_tcpchksum());
1473   1        
1474   1       ip_send_nolen:
1475   1      
1476   1        BUF->vhl = 0x45;
1477   1        BUF->tos = 0;
1478   1        BUF->ipoffset[0] = BUF->ipoffset[1] = 0;
1479   1        BUF->ttl  = UIP_TTL;
C51 COMPILER V8.16   UIP                                                                   01/02/2011 16:07:25 PAGE 25  

1480   1        ++ipid;
1481   1        BUF->ipid[0] = ipid >> 8;
1482   1        BUF->ipid[1] = ipid & 0xff;
1483   1        
1484   1        /* Calculate IP checksum. */
1485   1        BUF->ipchksum = 0;
1486   1        BUF->ipchksum = ~(uip_ipchksum());
1487   1      
1488   1        UIP_STAT(++uip_stat.tcp.sent);
1489   1       send:
1490   1        UIP_STAT(++uip_stat.ip.sent);
1491   1        /* Return and let the caller do the actual transmission. */
1492   1        return;
1493   1       drop:
1494   1        uip_len = 0;
1495   1        return;
1496   1      }
*** WARNING C280 IN LINE 696 OF UIP.C: 'icmp_input': unreferenced label
*** WARNING C280 IN LINE 1474 OF UIP.C: 'ip_send_nolen': unreferenced label
1497          /*-----------------------------------------------------------------------------------*/
1498          u16_t
1499          htons(u16_t val)
1500          {
1501   1        return HTONS(val);
1502   1      }
1503          /*-----------------------------------------------------------------------------------*/
1504          /** @} */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4721    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    714       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
